<?php
namespace AppBundle\Repository;

use AppBundle\Entity\UserSlp;
use Doctrine\ORM\Query;

/**
 * SpendingRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class SpendingRepository extends \Doctrine\ORM\EntityRepository
{
    
    
    
    public function findSlpUserSpendings($user)
    {
        //public function myFindAllDQL($user){}
        $query = $this->_em->createQuery('SELECT a, u, p, s, q, f, c FROM AppBundle:Spending a JOIN a.userSlp u JOIN a.product p JOIN p.subcategory s JOIN a.quantity q JOIN a.frequency f JOIN a.cost c WHERE a.userSlp = :user');
        $query->setParameter('user', $user);
        $results = $query->getResult();
        return $results;
    }

    public function findFrequencySlpUserSpendings($user, $minPeriod, $maxPeriod)
    {
        //$minMonth = date("Y-m-d H:i:s", mktime(0, 0, 0, date("m"), 1, date("Y")));
	    //$maxMonth = date("Y-m-t H:i:s", mktime(23, 59, 59, date("m"), 1, date("Y")));
        
        //public function myFindAllDQL($user){}
        $query = $this->_em->createQuery('SELECT a, u, p, s, q, f, c FROM AppBundle:Spending a JOIN a.userSlp u JOIN a.product p JOIN p.subcategory s JOIN a.quantity q JOIN a.frequency f JOIN a.cost c WHERE a.userSlp = :user AND a.date > :minPeriod AND a.date < :maxPeriod');
        $query->setParameter('user', $user);/* AND a.date > :minMonth AND a.date < :maxMonth*/
        $query->setParameter('minPeriod', $minPeriod);
        $query->setParameter('maxPeriod', $maxPeriod);
        $results = $query->getResult();
        return $results;
    }

    public function findSlpUserWeekSpendings($user) {
        $query = $this->_em->createQuery('SELECT a, u, p, s, cat, t, q, f, c FROM AppBundle:Spending a JOIN a.userSlp u JOIN a.product p JOIN p.subcategory s JOIN s.category cat JOIN cat.theme t JOIN a.quantity q JOIN a.frequency f JOIN a.cost c WHERE a.userSlp = :user');
        $query->setParameter('user', $user);
        $results = $query->getResult();
        return $results;
    }

    public function findSlpUserSpendingsWithoutFrequency($user)
    {
        //public function myFindAllDQL($user){}
        $query = $this->_em->createQuery('SELECT a, u, p, s, q, c FROM AppBundle:Spending a JOIN a.userSlp u JOIN a.product p JOIN p.subcategory s JOIN a.quantity q JOIN a.cost c WHERE a.userSlp = :user');
        $query->setParameter('user', $user);
        $results = $query->getResult();
        return $results;
    }

    public function findSlpUserThemeSpendings($user, $theme) {
        $query = $this->_em->createQuery('SELECT s, t, c, p, sub, cat, u FROM AppBundle:Spending s JOIN s.cost c JOIN s.product p JOIN p.subcategory sub JOIN sub.category cat JOIN cat.theme t JOIN s.userSlp u WHERE s.userSlp = :user AND t.name = :theme');
        $query->setParameter('user', $user);
        $query->setParameter('theme', $theme);
        $results = $query->getResult();
        return $results;
    }

    public function findFrequencySlpUserThemeSpendings($user, $theme, $minPeriod, $maxPeriod) {
        
        /*$minMonth = date("Y-m-d H:i:s", mktime(0, 0, 0, date("m"), 1, date("Y")));
	    $maxMonth = date("Y-m-t H:i:s", mktime(23, 59, 59, date("m"), 1, date("Y")));*/
        
        $query = $this->_em->createQuery('SELECT s, t, c, p, sub, cat, u FROM AppBundle:Spending s JOIN s.cost c JOIN s.product p JOIN p.subcategory sub JOIN sub.category cat JOIN cat.theme t JOIN s.userSlp u WHERE s.userSlp = :user AND t.name = :theme AND s.date > :minPeriod AND s.date < :maxPeriod');/* AND s.date > :minMonth AND s.date < :maxMonth*/
        $query->setParameter('user', $user);
        $query->setParameter('theme', $theme);
        $query->setParameter('minPeriod', $minPeriod);
        $query->setParameter('maxPeriod', $maxPeriod);
        $results = $query->getResult();
        return $results;
    }
}

