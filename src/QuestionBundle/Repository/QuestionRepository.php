<?php

namespace QuestionBundle\Repository;

/**
 * QuestionRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class QuestionRepository extends \Doctrine\ORM\EntityRepository
{
    //trouve toutes les questions d un questionnaire, sans les sous questions
    public function findQuestionWithoutSubBySurvey($survey)
    {
        $entityManager = $this->getEntityManager();
    
        $query = $entityManager->createQuery(
            'SELECT q
            FROM QuestionBundle\Entity\Question q
            WHERE q.survey = :survey
            
            AND q NOT INSTANCE OF QuestionBundle\Entity\Sub_question_choice
            AND q NOT INSTANCE OF QuestionBundle\Entity\Sub_question_free
            AND q NOT INSTANCE OF QuestionBundle\Entity\Sub_question_scale
                        
            AND q.id != 156
            ORDER BY q.number')
            ->setParameters([
                'survey' => $survey,

            ]);
        return $query->execute();
    }

//AND q.id != 142
//AND q.id != 145
//And q.id != 146
//AND q.id != 149
//And q.id != 150
//And q.id != 151
//And q.id != 152
//AND q.id != 25
//AND q.id != 154
//AND q.id != 23
//AND q.id != 148


    //trouve la derniere question d'un questionnaire
    public function findLastQuestionBySurvey($survey)
    {
        $entityManager = $this->getEntityManager();
    
        $query = $entityManager->createQuery(
            'SELECT q
            FROM QuestionBundle\Entity\Question q
            WHERE q.survey = :survey
            AND q NOT INSTANCE OF QuestionBundle\Entity\Sub_question_choice
            AND q NOT INSTANCE OF QuestionBundle\Entity\Sub_question_free
            AND q NOT INSTANCE OF QuestionBundle\Entity\Sub_question_scale
            ORDER BY q.number DESC'
            )
            ->setParameters([
                'survey' => $survey
            ]);
    
        return $query->execute();
    }



     public function findQuestionBySondage($sondage,$DerniereQuestion)

    {
        $entityManager = $this->getEntityManager();    
        $query = $entityManager->createQuery(
            'SELECT q
            FROM QuestionBundle\Entity\Manger q
            WHERE q.survey = :survey
            AND q.numQuestion > :DerniereQuestion 
            ORDER BY q.numQuestion')
            ->setParameters([
                'survey' => $sondage,
                'DerniereQuestion' => $DerniereQuestion
            ]);
    
        return $query->execute();
    }

    public function findQuestion($question){
        $qb = $this->_em
            ->createQueryBuilder()
            ->select('a')
            ->from('QuestionBundle:Question', 'a')
            ->where('a.question = :question')
            ->setParameter('question', $question);
        return $qb->getQuery()->getResult();
    }

    //Récupère la date de question la plus grande
    public function findByLatestQuestiondDate($updateAt)
    {
        $qb = $this->_em
            ->createQueryBuilder()
            ->select('a')
            ->from('QuestionBundle:Question','a')
            ->where('a.updateAt > :updateAt')
            ->orderBy('a.number')
            ->setParameter('updateAt',$updateAt);

        return $qb->getQuery()->getResult(); 
    }
}
